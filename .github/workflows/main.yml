name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache pip environment
        uses: actions/cache@v2
        env:
          cache-name: cache-pip-env
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.cache-name }}

      - name: Cache tox environment
        uses: actions/cache@v2
        env:
          cache-name: cache-tox-env
        with:
          path: .tox
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('tox.ini') }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      # Runs a test stage
      - name: Test stage
        run: |
          python3 -c "import struct;print('Python arch:', 8 * struct.calcsize('P'))"
          pip install tox
          tox -c .

  build:
    needs: lint
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache pip environment
        uses: actions/cache@v2
        env:
          cache-name: cache-pip-env
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.cache-name }}

      - name: Cache downloads
        id: cache-downloads
        uses: actions/cache@v2
        env:
          cache-name: cache-downloads
        with:
          path: |
            python3_embed.zip
            get-pip.py
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('download.ps1') }}

      # Generate full requirements via pip-compile
      - name: Generate requirements
        run: .\generate_requirements.ps1

      - name: Cache build environment
        id: cache-build-env
        uses: actions/cache@v2
        env:
          cache-name: cache-build-env
        with:
          path: python3_embed
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('prepare.ps1') }}-${{ hashFiles('requirements.txt') }}

      # Downloads required files
      - name: Download files
        if: steps.cache-downloads.outputs.cache-hit != 'true'
        run: .\download.ps1

      # Prepare environment to build application
      - name: Prepare environment
        if: steps.cache-downloads.outputs.cache-hit != 'true' || steps.cache-build-env.outputs.cache-hit != 'true'
        run: .\prepare.ps1

      # Builds a portable application
      - name: Application build
        run: .\build.ps1

      # Stores job artifacts
      - name: Archive application
        uses: actions/upload-artifact@v2
        with:
          name: print-server
          path: dist/print_server.exe

      - name: Archive portable application
        uses: actions/upload-artifact@v2
        with:
          name: print-server-portable
          path: dist/print_server
